function [NewVanHove] = VanHove2(InputTrack, TimeSteps, BinSize)
arguments
    InputTrack {iscell}
    TimeSteps {isrow} = 1
    BinSize {isinteger, isscalar} = 100
end
% This function is a version of VanHove with preallocation added in.
% The original algorithm failed to preallocate,
% which caused it to take hours to run for large datasets with hundreds of
% thousands of steps, as if a matrix changes shape you effectively have to
% rewrite the entire variable, which takes a lot of time for large
% matricies.
% The basic idea-- create a cell struct with one cell for each tau value.
% Then preallocate a matrix of the maximum possible length for each
% delta table, i.e. the length if every value is separated by dt=dtau
% Multiply each matrix by 1i to make all values non-real.
% Override the valid rows with real values.
% Count the number of real values at the end.
% Then preallocate a matrix which has that number of rows.
% Copy only real rows over to the new matrix.
% We have now avoided using anything which isn't preallocated.

% Without accounting for step size, the Max Size of Each VanHove Cell is 
% approximately the number of tracks times the maximum length of each track
InputLength=length(InputTrack{end});
NumTracks = length(InputTrack);

% plot probability of each step size.
if max(TimeSteps)>= length(InputTrack{end})
    error('Please select a set of timesteps for the Van Hove Plot which are less than the length of the longest path.')
end

for tau=TimeSteps 
    
    VanHoveOut{tau}=1i*ones(InputLength*NumTracks,4); 
    %zeros(length(MobileTrack{end},4)); 
    %preallocates VanHove to be as large as biggest MobileTrack dataset
end

for tau = TimeSteps
    fprintf(['\n Calculating VanHove Distribution dt=', num2str(tau), '\n'])
    counter=0; % Tracks number of innermost loops performed per tau
    for track=1:length(InputTrack)
        if mod(track,5000)==0
            fprintf('\r%d', track);
        end
        % Moves through every track in VHTracks
        % Change this to change number of frames for each distribution.
        BackStop=length(InputTrack{track})-tau;
        if BackStop > 1 && tau<length(InputTrack{track})
            % This condition works to avoid indexing errors which result
            % when tau is bigger than the number of particles in the track
            for t=1:BackStop 
                % This rosters through each position in the track 
                for dt=1:tau 
                    % accomodates frame skips--checks frame step values
                    % from 1 up to tau to see if Δt=τ
                    if InputTrack{track}(t+dt,1) - InputTrack{track}(t,1) == tau 
                       % if the Δt the desired tau...
                       counter=counter+1; % Increases loop number.
                       Dx = InputTrack{track}(t+dt,2)- InputTrack{track}(t,2); % write dΧ
                       Dy = InputTrack{track}(t+dt,3) - InputTrack{track}(t,3); % write dY
                       VanHoveOut{tau}(counter,:)=[Dx,Dy,track,t]; 
                       % records ΔΧ, ΔY, track number, AND start frame number
                       % so all data is preserved
                    end
                end
            end
        end
    end
end

RealIndex = cell(length(TimeStep), 1); % preallocate

for tau=TimeSteps
    RealIndex(tau)=0; % Reset the counter for each tau
    for k=1:length(VanHoveOut{tau})
        if isreal(VanHoveOut{tau}(k,1))
            % Count the real valued rows
            RealIndex(tau)=RealIndex(tau)+1;
        end
    end
end

for tau=TimeSteps
    NewVanHove{tau}=1i*ones(RealIndex(tau),4);
end

% Now we clean up our preallocated matricies, deleting all rows which start
% with an imaginary number.

for tau=TimeSteps
    fprintf(['\n Cleaning up for dt=', num2str(tau), '\n'])
    iter=0; % Reset the counter for each tau
    for k=1:length(VanHoveOut{tau})
        if isreal(VanHoveOut{tau}(k,1))
            iter=iter+1;
            NewVanHove{tau}(iter,:)= VanHoveOut{tau}(k,:);
        end
    end
end

% Trim VanHove after Preallocation!
% Trim zeroes off end of VanHove
    % 
    % for tau=time_steps
    % for i=length(VanHove{tau})
    %     if sum(VanHove{Tau}(i,:))==0
    %        VanHove{tau}(i:end,:)=[]
    %        break
    %     end
    % end
    % end

% Now we need to change from steps into Probabilities


%% Logarithmic sorting
% edgesPos=[-Inf,-5.5,-5, -4.5, -4,-3.5:0.1:log(2)];
% edgesNeg=-flip(edgesPos);
% % column 1 is x, column 2 is y, column 3 indicates if we should keep row
% for var=1
%     for tau=time_steps
%         fprintf('Log Sorting')
%         display(tau)
%         for k=1:length(VanHove{tau})
%             if VanHove{tau}(k,var)>0
%                 % should convert imaginary numbers resulting from log(negatives) to real negative numbers
%                 PosLogVanHove{tau}(k,var)=reallog(VanHove{tau}(k,var));
%                 PosLogVanHove{tau}(k,3)=1; % keep
%                 NegLogVanHove{tau}(k,var)=0;
%                 NegLogVanHove{tau}(k,3)=0; % throw out
%             else
%                 % record negative log value, throw out postive log value
%                 NegLogVanHove{tau}(k,var)=-reallog(-VanHove{tau}(k,var));
%                 NegLogVanHove{tau}(k,3)=1; % keep
%                 PosLogVanHove{tau}(k,var)=0;
%                 PosLogVanHove{tau}(k,3)=0; % throw out
%             end
%         end
%         FilterPosLogVanHove{tau}=[];
%         FilterNegLogVanHove{tau}=[];
%         for j=1:length(VanHove{tau})
%             if NegLogVanHove{tau}(j,3)==0 && PosLogVanHove{tau}(j,3)==1
%                 FilterPosLogVanHove{tau}=vertcat(FilterPosLogVanHove{tau},PosLogVanHove{tau}(j,1));
%             else
%                 FilterNegLogVanHove{tau}=vertcat(FilterNegLogVanHove{tau},NegLogVanHove{tau}(j,1));
%             end
% 
% 
%         end
%         NegPVanHove{tau}(:,var) = histcounts( FilterNegLogVanHove{tau},edgesNeg)/length(VanHove{tau});
%         PosPVanHove{tau}(:,var) = histcounts(FilterPosLogVanHove{tau},edgesPos)/length(VanHove{tau});
%         PVanHove{tau}(:,var)=vertcat(NegPVanHove{tau}(:,var), PosPVanHove{tau}(:,var));
%      end
% end