function outs = pan_collect_for_imagenotes(filepath, plot_types, sorting_values)


if nargin < 3 || isempty(sorting_values)
%     sorting_values = {'channel', 'pass', 'well', 'mcu', 'visc', 'SNR'};
    sorting_values = {'channel', 'pass', 'well', 'mcu', 'visc'};
%     sorting_values = {'visc'};    
end

if nargin < 2 || isempty(plot_types)
    plot_types = { 'trav', 'txy', 'msd', 'flburst' };
%     plot_types = {'flburst'};
end

if ~exist('filepath', 'var')
    error('No file defined.'); 
end

systemid = 'panoptes';

% load the metadata from the appropriate files generated by PanopticNerve
metadata = pan_load_metadata(filepath, systemid, '96well');


data = load(['matlab_analysis/PM_rheology/' metadata.instr.experiment '.mat']);

imagenotes_tag = {'ellipses', 'image', 'labels', 'mask'};

% data = load(panoptes_resultsfile);
% 
% metadata = data.metadata;

collection_dir = 'imagenotes_collection';
mkdir(collection_dir);

metadata_dir = [collection_dir '/metadata'];
mkdir(metadata_dir);


Nplot_types = length(plot_types);
Nsorting_values = length(sorting_values);

for k = 1:Nplot_types
    
    switch plot_types{k}
        case 'trav'   % 'trav', 'txy', 'msd', 'flburst'
            filelist = dir('*.trav.png');            
        case 'txy'
            filelist = dir('*.txy.png');
        case 'msd'
            filelist = dir('*.msd.png');
        case 'flburst'                      
            % start working on the fluorescence burst (FLburst) files outtputed by the metadata structure
            if ~isempty(metadata.files.FLburst)
                filelist = metadata.files.FLburst;
            else
                filelist = dir('*FLburst*');               
            end
        otherwise
            error('Unknown plot type.');            
    end
end

% create the metadata files and populate with appropriate data.
for m = 1:Nsorting_values

    sorting_values_dir = [metadata_dir '/' sorting_values{m}];
    mkdir(sorting_values_dir);


    fid = fopen([sorting_values_dir '/' sorting_values{m} '.txt'], 'w');
    fid2 = fopen([sorting_values_dir '/' 'AllNames'], 'w');


    fclose(fid);
    fclose(fid2);

end


outs = 0;
return;
        
% % the viscosities are going to include all passes and so every viscosity
% % for a particular well will be constant for all passes.
% visclist = data.visclist;
% 
% 
% 
% 
% 
% 
% 
% collection_file = [metadata.instr.experiment '_' collection_dir];
% 
% % % % fid = fopen([collection_dir '/' collection_file '.txt'], 'w');
% % % fid = fopen([sorting_values_dir '/' sorting_values{k} '.txt'], 'w');
% % % fid2 = fopen([sorting_values_dir '/' 'AllNames'], 'w');
% 
% % fprintf(fid, 'image_filename, pass, well, channel, MCU_parameter, visc_Pa.s\n');
% png_files = dir([collection_dir '/*.png']);
% logentry('Not writing over PNG files that already exist.');
% 
% for k = 1:length(filelist)
%     
% 
%     mydir = filelist(k).name;
%     myfile = 'frame0001.pgm';
%       
%     
%     old_FLburst_filename = [mydir '/' myfile];
%     new_FLburst_filename = [mydir];
%         
%     if isempty(png_files)
%         im = imread(old_FLburst_filename, 'PGM');    
%         imwrite(im, [collection_dir '/' new_FLburst_filename,'_group_1_image_' representation, '.png'] , 'PNG');
%     end
%     
%     [mywell mypass] = pan_wellpass( mydir );
%     
%     mychannel = pan_get_channel_id(mywell);
%     
%     myMCU = metadata.mcuparams.mcu(metadata.mcuparams.well == mywell & ...
%                                    metadata.mcuparams.pass == mypass );
%                                
%     myvisc = visclist(mywell);
% 
%     metadata_out(k,:) = [mypass, mywell, mychannel, myMCU, myvisc];
%     filelist_out{k,1} = new_FLburst_filename;
% end
% 
% [sorted_metadata, idx] = sortrows(metadata_out, [1 2]);
% sorted_filelist = filelist_out(idx);
% 
% % switch sorting_values
% %     case 'channel'
% %         values = num2str(sorted_metadata(:,3));
% %     case 'pass'
% %         values = num2str(sorted_metadata(:,1));
% %     case 'well'
% %         values = num2str(sorted_metadata(:,2));
% %     case 'MCU'
% %         values = num2str(sorted_metadata(:,4));
% %     case 'visc'
% %         values = num2str(sorted_metadata(:,5), '%10.2e\n');
% %     otherwise
% %         error('unknown sorting_values');        
% % end
% 
% 
% for k = 1:length(filelist)
%     fprintf(fid, '%s,%s,channel %s#pass %s#well %s#MCU %s#visc_Pa.s %s\n', ...
%                  [sorted_filelist{k} '_group_1'], ...
%                  values(k,:), ...
%                  num2str(sorted_metadata(k,3)), ...
%                  num2str(sorted_metadata(k,1)), ...
%                  num2str(sorted_metadata(k,2)), ...
%                  num2str(sorted_metadata(k,4)), ...
%                  num2str(sorted_metadata(k,5),'%10.2e\n'));
%              
%      fprintf(fid2, '%s,%s\n', ...
%                  sorted_filelist{k}, ...
%                  sorting_values);
% end
% 
% % % fclose(fid);
% % % fclose(fid2);
% outs = 0;
% 
% return;
 
    
% function for writing out stderr log messages
function logentry(txt)
    logtime = clock;
    logtimetext = [ '(' num2str(logtime(1),  '%04i') '.' ...
                   num2str(logtime(2),        '%02i') '.' ...
                   num2str(logtime(3),        '%02i') ', ' ...
                   num2str(logtime(4),        '%02i') ':' ...
                   num2str(logtime(5),        '%02i') ':' ...
                   num2str(floor(logtime(6)), '%02i') ') '];
     headertext = [logtimetext 'pan_collect_FLburst_images: '];
     
     fprintf('%s%s\n', headertext, txt);
     
     return;    
