function dataout = pan_create_trav_report(filepath, systemid)
% PAN_CREATE_TRAV_REPORT creates tracker availability report for a Monoptes/Panoptes experiment
%
% Panoptes function 
% 
% This function contains  
% 
% function dataout = pan_create_trav_report(filepath, systemid) 
%
% where "dataout" is the outputted data structure for the entire run
%       "filepath" defines the location for tracking data and metadata files
%       "systemid" defines the systed used, is either 'Monoptes' or 'Panoptes'
%       "exityn" if 'y' matlab closes after finishing the analysis
%
% Notes:
% - This function is designed to work within the PanopticNerve software
% chain but can be used manually from the matlab command line interface.
%

% First, set up default values for input parameters in case they are empty 
% or otherwise do not exist.  

video_tracking_constants;

% defaults the single-channel instrument
if nargin < 2 || isempty(systemid)
    systemid = 'monoptes';
end

% does not exit matlab by default when the analysis run is complete
if nargin < 3 || isempty(exityn)
    exityn = 'n';
end

% moving to the path defined as the 'root for the experimental data'
cd(filepath);

% start a timer (to report computation time later on)
tid = tic;

% load the metadata from the appropriate files generated by PanopticNerve
metadata = pan_load_metadata(filepath, systemid, '96well');


filelist = metadata.files.tracking.csv;
duration = metadata.instr.seconds;
fps = metadata.instr.fps_fluo;
numframes = duration * fps;

Nfiles = length(filelist);

logentry(['Plotting the tracker availability for ' num2str(Nfiles) ' files.']);

count = 1;  
for k = 1:Nfiles
    d = load_video_tracking(filelist(k).name, ...
                        metadata.instr.fps_imagingmode, ...
                        'pixels', 1, ...
                        'absolute', 'no', 'matrix');
              
    [mywell, mypass] = pan_wellpass(filelist(k).name);
    
    
    % plotting tracker availability
    travfig = figure('Visible','off');  
    if ~isempty(d)
        h = plot_tracker_avail(d(:,FRAME), d(:,ID), travfig);
        set(gca, 'XLim', [0 numframes*1.1]);
        tr_avail_file_temp = strrep(filelist(k).name, 'vrpn.mat', '');
        tr_avail_file_temp = strrep(tr_avail_file_temp, 'vrpn.evt.mat', '');    
        tr_avail_file{k} = [tr_avail_file_temp  'trav'];

        saveas(travfig, [tr_avail_file{k} '.png'], 'png');
%         gen_pub_plotfiles(tr_avail_file{k}, travfig, 'normal'); 
        close(travfig); 
        
        Ntrackers = length(unique(d(:,ID)));
        
        tracker_list = unique(d(:,ID));
        for m = 1:length(tracker_list); 
            idx = find(d(:,ID) == tracker_list(m));
            
            max_frame(m) = max( d(idx,FRAME));
            
            Nframes_trkr = max( d(idx,FRAME));
            
            max_Xjump = max(diff(d(idx,X)));
            max_Yjump = max(diff(d(idx,Y)));
            
            if isempty(max_Xjump) 
                max_Xjump = NaN;
                max_Yjump = NaN;
            end
            
            tracker_summary(count,:) = [mywell, mypass, tracker_list(m), Nframes_trkr, max_Xjump, max_Yjump]; 
            count = count + 1;
        end
        most_frequent_num_of_frames(k) = mode(max_frame);
        
        frame_max = floor(metadata.instr.seconds * metadata.instr.fps_fluo) - 1; 
        N_trackers = length(unique(d(:,ID)));
        N_trackers_at_end_time = length(find( d(:,FRAME) == frame_max));
        
        fov_summary(k,:) = [mywell, mypass, N_trackers, frame_max, N_trackers_at_end_time];
        
    end       
    
end

elapsed_time = toc(tid); 

logentry(['Plotting these data took ' num2str(elapsed_time) ' seconds.']);

% dataout = most_frequent_num_of_frames;

dataout.tracker_summary = tracker_summary;
dataout.tracker_summary_cols = {'well', 'pass', 'trackerID', 'number of tracked frames', 'max X jump', 'max Y jump'};
dataout.fov_summary = fov_summary;
dataout.fov_summary_cols = {'well', 'pass', 'number of trackers', 'last frame', 'number of trackers at last frame'};

return;



% function for writing out stderr log messages
function logentry(txt)
    logtime = clock;
    logtimetext = [ '(' num2str(logtime(1),  '%04i') '.' ...
                   num2str(logtime(2),        '%02i') '.' ...
                   num2str(logtime(3),        '%02i') ', ' ...
                   num2str(logtime(4),        '%02i') ':' ...
                   num2str(logtime(5),        '%02i') ':' ...
                   num2str(floor(logtime(6)), '%02i') ') '];
     headertext = [logtimetext 'pan_create_trav_report: '];
     
     fprintf('%s%s\n', headertext, txt);
     
     return;    

return;
