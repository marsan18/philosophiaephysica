function dataout = pan_create_SNR_report(filepath, systemid)
% PAN_CREATE_SNR_REPORT creates report for signal to noise measurements in a Monoptes/Panoptes experiment
%
% Panoptes function 
% 
% This function contains  
% 
% function dataout = pan_create_SNR_report(filepath, systemid) 
%
% where "dataout" is the outputted data structure for the entire run
%       "filepath" defines the location for tracking data and metadata files
%       "systemid" defines the systed used, is either 'Monoptes' or 'Panoptes'
%
% Notes:
% - This function is designed to work within the PanopticNerve software
% chain but can be used manually from the matlab command line interface.
%

% First, set up default values for input parameters in case they are empty 
% or otherwise do not exist.  

video_tracking_constants;

% defaults the single-channel instrument
if nargin < 2 || isempty(systemid)
    systemid = 'monoptes';
end

% does not exit matlab by default when the analysis run is complete
if nargin < 3 || isempty(exityn)
    exityn = 'n';
end

% moving to the path defined as the 'root for the experimental data'
cd(filepath);

% start a timer (to report computation time later on)
tid = tic;

% load the metadata from the appropriate files generated by PanopticNerve
metadata = pan_load_metadata(filepath, systemid, '96well');

% start working on the fluorescence burst (FLburst) files outtputed by the metadata structure
if ~isempty(metadata.files.FLburst)
    filelist = metadata.files.FLburst;
else
    error('No FLburst files to be found.');
end

MCUparamlist = metadata.mcuparams;

% % % % % % duration = metadata.instr.seconds;
% % % % % % fps = metadata.instr.fps_fluo;
% % % % % % numframes = duration * fps;

Nfiles = length(filelist);

logentry(['Collecting the SNR for ' num2str(Nfiles) ' files.']);

for k = 1:Nfiles
    
    cd(filelist(k).name);
    
    file = ['frame0001.pgm'];
    
    [well(k,1) pass(k,1)] = pan_wellpass(filelist(k).name);
    
    channel(k,1) = pan_get_channel_id(well(k,1));        
    
    MCUidx = find(metadata.mcuparams.well == well(k,1) & ...
                  metadata.mcuparams.pass == pass(k,1));
              
    MCUparam(k,1) = metadata.mcuparams.mcu(MCUidx);

    SNR(k,1) = tracking_image_SNR(file, 0.001, 'y');
    
    cd('..');
    
    SNRfig = gcf;
    drawnow;
    
    saveas(SNRfig, [filelist(k).name '.SNR.fig']);
    close(SNRfig);
% %     % plotting tracker availability
% %     travfig = figure('Visible','off'); 
% %     if ~isempty(d)
% %         h = plot_tracker_avail(d(:,FRAME), d(:,ID), travfig);
% %         set(gca, 'XLim', [0 numframes*1.1]);
% %         tr_avail_file_temp = strrep(filelist(k).name, 'vrpn.mat', '');
% %         tr_avail_file_temp = strrep(tr_avail_file_temp, 'vrpn.evt.mat', '');    
% %         tr_avail_file{k} = [tr_avail_file_temp  'trav'];
% % 
% %         saveas(travfig, [tr_avail_file{k} '.png'], 'png');
% % %         gen_pub_plotfiles(tr_avail_file{k}, travfig, 'normal'); 
% %         close(travfig); 
% %         
% %         tracker_list = unique(d(:,ID));
% %         for m = 1:length(tracker_list); 
% %             idx = find(d(:,ID) == tracker_list(m));
% %             max_frame(m) = max( d(idx,FRAME));
% %         end
% %         most_frequent_num_of_frames(k) = mode(max_frame);
% %         
% %     end       
    
end

elapsed_time = toc(tid); 

logentry(['Computing the SNR (and perhaps plotting) took ' num2str(elapsed_time) 'seconds.']);

dataout.well = well;
dataout.pass = pass;
dataout.channel = channel;
dataout.mcu  = MCUparam;
dataout.SNR  = SNR;

return;



% function for writing out stderr log messages
function logentry(txt)
    logtime = clock;
    logtimetext = [ '(' num2str(logtime(1),  '%04i') '.' ...
                   num2str(logtime(2),        '%02i') '.' ...
                   num2str(logtime(3),        '%02i') ', ' ...
                   num2str(logtime(4),        '%02i') ':' ...
                   num2str(logtime(5),        '%02i') ':' ...
                   num2str(floor(logtime(6)), '%02i') ') '];
     headertext = [logtimetext 'pan_create_trav_report: '];
     
     fprintf('%s%s\n', headertext, txt);
     
     return;    

return;
